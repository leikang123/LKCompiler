// 定义语法规则
options {
STATIC = false;
JDK_VERSION = "1.8";

}
PARSER_BEGIN(Parser)
package src.main.parser;
import java.io.*;
import java.util.*;
import java.lang.reflect.*;

public class Parser {
    // 属性
    private String sourceName;
    private LibraryLoader loader;
    private ErrorHandler errorHandler;
    private Set<String> knownTypedefs;

    static public AST parseFile(File file,LibraryLoader loader,ErrorHander errorHander)throws SyntaxException
    ,FileException{
        return paesrFile(file,loader,errorHander,false);
    }
    static public Declarations parseDeclFile(File file,LibraryLoader loader,ErrorHander errorHander)throws SyntaxException,FileExceptionP{
      return parseDeclFile(file,loader,errorHander,false);  
    }
     static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler,
                                             boolean debug)
                                             throws SyntaxException,
                                                    FileException {
        return newFileParser(file, loader, errorHandler, debug).parseDecls();
    }
     // 字符
    static final public String SOURCE_ENCODING = "UTF-8";

    static public Parser newFileParser(File file,
                                       LibraryLoader loader,
                                       ErrorHandler errorHandler,
                                       boolean debug)
                                       throws FileException {
        try {
            BufferedReader r =
                new BufferedReader(
                    new InputStreamReader(new FileInputStream(file),
                                          SOURCE_ENCODING));
            return new Parser(r, file.getPath(), loader, errorHandler, debug);
        }
        catch (FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }
        catch (UnsupportedEncodingException ex) {
            throw new Error("UTF-8 is not supported??: " + ex.getMessage());
        }
    }


    public Parser(Reader s, String name,
                  LibraryLoader loader, ErrorHandler errorHandler) {
        this(s, name, loader, errorHandler, false);
    }
    


    public Parser(Reader s, String name, LibraryLoader loader,
                  ErrorHandler errorHandler, boolean debug) {
        this(s);
        this.sourceName = name;
        this.loader = loader;
        this.errorHandler = errorHandler;
        this.knownTypedefs = new HashSet<String>();
        if (debug) {
            enable_tracing();
        }
        else {
            disable_tracing();
        }
    }

    public AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        }
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (LookaheadSuccess err) {
            throw new SyntaxException("syntax error");
        }
    }

    public Declarations parseDecls() throws SyntaxException {
        try {
            return declaration_file();
        }
        catch (TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }

    private void addKnownTypedefs(List<TypedefNode> typedefs) {
        for (TypedefNode n : typedefs) {
            addType(n.name());
        }
    }

    private void addType(String name) {
        knownTypedefs.add(name);
    }

    private boolean isType(String name) {
        return knownTypedefs.contains(name);
    }

    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = integerValue(image);
        if (image.endsWith("UL")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
        }
        else if (image.endsWith("L")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
        }
        else if (image.endsWith("U")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
        }
        else {
            return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
        }
    }

    private long integerValue(String image) {
        String s = image.replaceFirst("[UL]+", "");
        if (s.startsWith("0x") || s.startsWith("0X")) {
            return Long.parseLong(s.substring(2), 16);
        }
        else if (s.startsWith("0") && !s.equals("0")) {
            return Long.parseLong(s.substring(1), 8);
        }
        else {
            return Long.parseLong(s, 10);
        }
    }

    private long characterCode(String image) throws ParseException {
        String s = stringValue(image);
        if (s.length() != 1) {
            throw new Error("must not happen: character length > 1");
        }
        return (long)s.charAt(0);
    }

    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);

        while ((idx = image.indexOf("\\", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }

    private TypeRef size_t() {
        return IntegerTypeRef.ulongRef();
    }

    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException(
                "octal character sequence too big: \\" + digits);
        }
        return (char)i;
    }

    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;
    // 各种符号的字符
    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '0': return '\0';
        case '"': return '"';
        case '\'': return '\'';
        case 'a': return bell;
        case 'b': return backspace;
        case 'e': return escape;
        case 'f': return '\f';
        case 'n': return '\n';
        case 'r': return '\r';
        case 't': return '\t';
        case 'v': return vt;
        default:
            throw new ParseException("unknown escape sequence: \"\\" + c);
        }
    }

    public Location location(Token t){
        return new Location(sourceName,t);
    }
}
PARSER_END(Parser)
/*词法设计规则，跳过空白符*/
SPECIAL_TOKEN: { <SPACES:{["","\t","\n","\f"]}+>}
// 扫描注释/* */
MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }
// 扫描字符字面量
MORE: { <"'"> : IN_CHARACTER }                         
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM      
    | <"\\" (["0"-"7"]){3}>      : CHARACTER_TERM      
    | <"\\" ~[]>                 : CHARACTER_TERM      
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT } 


// 扫描字符串字面量
MORE: { <"\""> : IN_STRING }                           
<IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>                   
    | <"\\" (["0"-"7"]){3}>                            
    | <"\\" ~[]>                                      
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }        


// 跳过注释
SPECIAL_TOKEN: {
    <LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}
// 关键字解析
TOKEN : {
     <VOID  :"void">
    |<CHAR  :"char">
    |<SHORT :"short">
    |<INT   :"int">
    |<LONG  :"long">
    |<STRUCT :"struct">
    |<UNION  :"union">
    |<ENUM  :"enum">
    |<STATIC :"static">
    |<EXTERN :"extern">
    |<CONST :"const">
    |<SIGNED    :"signed">
    |<UNSIGNED  :"unsigned">
    |<IF    :"if">
    |<ELSE  :"else">
    |<SWITCH  :"switch">
    |<CASE  :"case">
    |<DEFAULT  :"default">
    |<WHILE  :"while">
    |<DO  :"do">
    |<FOR  :"for">
    |<RETURN :"return">
    |<BREAK  :"break">
    |<GOTO     :"goto">
    |<CONTINUE  :"continue">
    |<TYPEDEF  :"typedef">
    |<IMPORT  :"import">
    |<SIZEOF  :"sizeof">
}
// 描述语法规则，单词的命名法则，首字母必须是字母或者下划线，不能是数字，第二个字母可以是数字
TOKEN : {
    <IDENTIFIER: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"z","_","0"-"9"])*>
}
// 数值匹配
TOKEN : {
    <INTEGER :["1"-"9"](["0"-"9"])* ("U")?("L")?
             |"0" ["x","X"](["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
             |"0" (["0"-"7"])*("U")?("L")?
             >

}
/*AST Grammar
*
*/
AST compilation_unit() :
{ 
    Tokent t;
    Declarations impdecls,decls;
}
{

}
// import 语句声明 import java.xxx.yyy;
// declaration意思是声明，statement 语句声明，expression 表达式，term 项

Declarations import_stmts():
{   
    // 属性
    String libid;
    // 创建对象Declarations
    Declarations impdecls = new Declarations();
}
{
     (libid = import_stmts()
     {
         Declarations decls = loader.LoadLibrary(libid,errorHander);
         if(decls !=null){
             impdecls.add(decls);
             addKnownTypedefs(decls.typedefs()); 
         }

     }
     catch (CompilerException ex){
         throws new ParseException(ex.getMessage());

     }
     )*
     {
         return impdecls;
     }

}
// String import_stmts
String import_stmts():
{
    StringBuffer buf = new StringBuffer();
    String n;

}
{
    <IMPORT> n =name(){
        buf.append(n)
    }
    ("." n=name()){
        buf.append(".");
        buf.append(n);
    })*";"
    {
        return buf.toString();
    }
}
// top_defs的规则定义：
Declarations top_defs():{
    // 创建声明的对象decls；
    Declarations decls = new Declarations();
    // 函数定义对象
    DefinedFunction defun;
    // 变量名对象，变量名可以定义多个
    List<DefinedVariable> defvars;
    // 常数变量
    Constant defconst;
    // 结构体
    structNode defstruct;
     // 联合体
    UnionNode defunion;
    // 类型定义
    TypedefNode typedef;

}
{
    (LOOKAHEAD(storage() typedef() <IDENTIFIER> "(" )
     defun()                  {decls.addDefun(defun);}
     |LOOKAHEAD(3)            
      defvars()               {decls.addDefvars(defvars);}
     |defconst()              {decls.addDefconst(defconst);}
     |defstruct()             {decls.addDefstruct(defstruct);}
     |defunion()              {decls.addDefunion(defunion);}
     |typedef()               {decls.addTypedef(typedef);}
     )*
     {
         return decls;
     }

}
// 变量名的规则设计：
List<DefinedVariable> defvars ():
{
    // 创建变量名的对象defs
    List<DefinedVariable> defs  = new ArrayList<DefinedVariable>();
    // 判断是priv;
    boolean priv;
    // 类型判断
    TypedefNode type;
    // 名称
    String name;
    // 有无初始化默认=null;
    ExprNode init =null;

}
{
    priv = storage() type=type() name =name() ["=" init =expr()]
    { 
        defs.add(new DefinedVariable(priv,type,name,init));
        init = null;  
}
// int a,b;这种表达式
("," name = name() ["=" init=expr()]
{
    defs.add(new DefinedVariable(priv,type,name,init));
    init =null;
}
)* ";"
{
    return defs;

}
//常数变量
Constant defconst ():
{
    // 常量定义的规则类型多样，有常量名字，有数字是常量的值，有的常量名称前面修饰词或者类型
    TypeNode type;
    String name;
    ExprNode value;
}
{
    <Constant> type = type() name = name() "=" value =expr() ";"
    {
        return new Constant(type,name,value);

    }
}
// 方法的规则设计
DefinedFunction defun():
{
    boolean priv;
    TypeRef ret;
    String n;
    Params ps;
    BlockNode body;
}
{
    priv=storage() ret=typeref() n=name() "(" ps=params() ")" body=block()
        {
            TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
            return new DefinedFunction(priv, new TypeNode(t), n, ps, body);
        }
}
// storagede 设计规则
boolean storage():
{ Token t = null; }
{
    [t=<STATIC>] { 
        return (t == null ? false : true);
         }
}
//参数设计规则：
Params params():
{
    Token t;
    Params params;
}
{
      LOOKAHEAD(<VOID> ")")
      t=<VOID>
        {
            return new Params(location(t), new ArrayList<Parameter>());
        }
    | params=fixedparams()
            ["," "..." { params.acceptVarargs(); }]
        {
            return params;
        }
}
// 
Params fixedparams():
{
    List<Parameter> params = new ArrayList<Parameter>();
    Parameter param, param1;
}
{
    param1=param() { params.add(param1); }
    ( LOOKAHEAD(2) "," param=param() { params.add(param); } )*
        {
            return new Params(param1.location(), params);
        }
}

// 
Parameter param():
{
    TypeNode t;
    String n;
}
{
    t=type() n=name() { return new Parameter(t, n); }
}
// 
BlockNode block():
{
    Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
}
{
    t="{" vars=defvar_list() stmts=stmts() "}"
        {
            return new BlockNode(location(t), vars, stmts);
        }
}
// 语句的语法设计
List<StmtNode> stmts():
{
    List<StmtNode> st = new ArrayList<StmtNode>();
    // 表达式节点对象
    StmtNode s;

}
{
    (s=stmt() {
        if(s!=null) st.add(s);
        })*
    {
        return st;
    }
}
StmtNode stmt():
{
    StmtNode m = null;
    ExprNode e = null;

}
{
    ( ";"
    | LOOKAHEAD(2) m=labeled_stmt()
    | e=expr() ";" { m = new ExprStmtNode(e.location(), e); }
    | m=block()
    | m=if_stmt()
    | m=while_stmt()
    | m=dowhile_stmt()
    | m=for_stmt()
    | m=switch_stmt()
    | m=break_stmt()
    | m=continue_stmt()
    | m=goto_stmt()
    | m=return_stmt()
    )
        {
            return m;
        }
}
LabelNode labeled_stmt():
{
Tokent t;
StmtNode m;
}
{
    t=<IDENTIFIER> ":" m=stmt()
    {
        return new LabelNode(location(t),t.image,m);

    }
}
IfNode if_stmt():
{   
    // 取单词 t;
    Tokent t;
    // 表达式节点对象 cond
    ExprNode cond;
    // 语句声明对象为空
    StmtNode thenBody,elseBody = null;
}
{
   t=<IF> "(" cond=expr() ")" "{"  thenBody=stmt() "}" [LOOKAHEAD(1) <ELSE> elseBody=stmt()]
          {
              return new IfNode(location(t),cond.thenBody,elseBody);

          }
}
WhileNode while_stmt():
{
    Tokent t;
    // 括号内表达式
    ExprNode cond;
    // 语句代码
    StmtNode sn;
}
{
    t=<WHILE> "(" cond=expr() ")" "{" sn=stmt() "}"
    {
        return new WhileNode(location(t),cond,sn);
    }
}
DoWhileNode do_while_stmt():
{
    Tokent t;
    ExprNode cond;
    stmtNode body;
}
{
    t=<DO> "{" body = stmt() "}" <WHILE> "(" cond = expr() ")" "{" body = stmt()"}"
    {
        return DoWhileNode(Location(t),cond,body);
    }
}
ForNode for_stmt():
{
    tokent t;
    ExprNode init=null,cond=null,incr=null;
    stmtNode body;

}
{
    t=<FOR> "(" [init = expr()]";"
                [cond = expr()]";"
                [incr = expr()]";"
                ")" "{" body = stmt()"}"

}
{
    return ForNode(location(t),init,cond,incr,body);
}
SwitchNode switch_stmt():
{
    Tokent t;
    ExprNode cond;
    List<CaseNode> bodies;
}
{
    t=<SWITCH> "(" cond=expr() ")" "{" <CASE> bodies=case_clauses() "}"
    {
    return new SwitchNode(location(t),cond,bodies);
    }
}
List<CaseNode> case_clauses():
{
    List<CaseNode> clauses = new ArrayList<CaseNode>();
    CaseNode cn;
}
{
    (n=case_clause() { clauses.add(n); })*
            [n=default_clause() { clauses.add(n); }]
        {
            return clauses;
        }
}
CaseNode case_clause():
{
    List<ExprNode> values;
    BlockNode body;
}
{
    values=cases() body=case_body()
        {
            return new CaseNode(body.location(), values, body);
        }
}
List<ExprNode> cases():
{
    List<ExprNode> values = new ArrayList<ExprNode>();
    ExprNode n;
}
{
    (<CASE> n=primary() ":" { values.add(n); })+
        {
            return values;
        }
}

CaseNode default_clause():
{ BlockNode body; }
{
    <DEFAULT_> ":" body=case_body()
        {
            return new CaseNode(body.location(), new ArrayList<ExprNode>(), body);
        }
}
// expr表达式的设计规则
ExprNode expr():
{
    ExprNode lhs,rhs,expr;
    String op;
}
{
    LOOKAHEAD(term() "=")
      lhs=term() "=" rhs=expr()
        {
            return new AssignNode(lhs, rhs);
        }
    | LOOKAHEAD(term() opassign_op())
      lhs=term() op=opassign_op() rhs=expr()
        {
            return new OpAssignNode(lhs, op, rhs);
        }
    | expr=expr10()
        {
            return expr;
        }
}
// 
String opassign_op(): {}
{
    ( "+="  { return "+"; }
    | "-="  { return "-"; }
    | "*="  { return "*"; }
    | "/="  { return "/"; }
    | "%="  { return "%"; }
    | "&="  { return "&"; }
    | "|="  { return "|"; }
    | "^="  { return "^"; }
    | "<<=" { return "<<"; }
    | ">>=" { return ">>"; }
    )
}

ExprNode expr10():
{ ExprNode c, t, e; }
{
    c=expr9() ["?" t=expr() ":" e=expr10()
                    { return new CondExprNode(c, t, e); }]
        {
            return c;
        }
}

ExprNode expr9():
{ ExprNode l, r; }
{
    l=expr8() ("||" r=expr8() { l = new LogicalOrNode(l, r); })*
        {
            return l;
        }
}

ExprNode expr8():
{ ExprNode l, r; }
{
    l=expr7() ("&&" r=expr7() { l = new LogicalAndNode(l, r); })*
        {
            return l;
        }
}

ExprNode expr7():
{ ExprNode l, r; }
{
    l=expr6() ( ">"  r=expr6() { l = new BinaryOpNode(l, ">", r); }
              | "<"  r=expr6() { l = new BinaryOpNode(l, "<", r); }
              | ">=" r=expr6() { l = new BinaryOpNode(l, ">=", r); }
              | "<=" r=expr6() { l = new BinaryOpNode(l, "<=", r); }
              | "==" r=expr6() { l = new BinaryOpNode(l, "==", r); }
              | "!=" r=expr6() { l = new BinaryOpNode(l, "!=", r); } )*
        {
            return l;
        }
}

ExprNode expr6():
{ ExprNode l, r; }
{
    l=expr5() ("|" r=expr5() { l = new BinaryOpNode(l, "|", r); })*
        {
            return l;
        }
}

ExprNode expr5():
{ ExprNode l, r; }
{
    l=expr4() ("^" r=expr4() { l = new BinaryOpNode(l, "^", r); })*
        {
            return l;
        }
}

ExprNode expr4():
{ ExprNode l, r; }
{
    l=expr3() ("&" r=expr3() { l = new BinaryOpNode(l, "&", r); })*
        {
            return l;
        }
}

ExprNode expr3():
{ ExprNode l, r; }
{
    l=expr2() ( ">>" r=expr2() { l = new BinaryOpNode(l, ">>", r); }
              | "<<" r=expr2() { l = new BinaryOpNode(l, "<<", r); }
              )*
        {
            return l;
        }
}

ExprNode expr2():
{ ExprNode l, r; }
{
    l=expr1() ( "+" r=expr1() { l = new BinaryOpNode(l, "+", r); }
              | "-" r=expr1() { l = new BinaryOpNode(l, "-", r); }
              )*
        {
            return l;
        }
}

ExprNode expr1():
{ ExprNode l, r; }
{
    l=term() ( "*" r=term() { l = new BinaryOpNode(l, "*", r); }
             | "/" r=term() { l = new BinaryOpNode(l, "/", r); }
             | "%" r=term() { l = new BinaryOpNode(l, "%", r); }
             )*
        {
            return l;
        }
}

ExprNode term():
{
    TypeNode t;
    ExprNode n;
}
{
      LOOKAHEAD("(" type())
      "(" t=type() ")" n=term()     { return new CastNode(t, n); }
    | n=unary()                     { return n; }
}

ExprNode unary():
{
    ExprNode n;
    TypeNode t;
}
{
      "++" n=unary()    { return new PrefixOpNode("++", n); }
    | "--" n=unary()    { return new PrefixOpNode("--", n); }
    | "+" n=term()      { return new UnaryOpNode("+", n); }
    | "-" n=term()      { return new UnaryOpNode("-", n); }
    | "!" n=term()      { return new UnaryOpNode("!", n); }
    | "~" n=term()      { return new UnaryOpNode("~", n); }
    | "*" n=term()      { return new DereferenceNode(n); }
    | "&" n=term()      { return new AddressNode(n); }
    | LOOKAHEAD(3) <SIZEOF> "(" t=type() ")"
        {
            return new SizeofTypeNode(t, size_t());
        }
    | <SIZEOF> n=unary()
        {
            return new SizeofExprNode(n, size_t());
        }
    | n=postfix()       { return n; }
}

ExprNode postfix():
{
    ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
}
{
    expr=primary()
    ( "++"                  { expr = new SuffixOpNode("++", expr); }
    | "--"                  { expr = new SuffixOpNode("--", expr); }
    | "[" idx=expr() "]"    { expr = new ArefNode(expr, idx); }
    | "." memb=name()       { expr = new MemberNode(expr, memb); }
    | "->" memb=name()      { expr = new PtrMemberNode(expr, memb); }
    | "(" args=args() ")"   { expr = new FuncallNode(expr, args); }
    )*
        {
            return expr;
        }
}

String name():
{ Token t; }
{
    t=<IDENTIFIER> { return t.image; }
}

List<ExprNode> args():
{
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
}
{
    [ arg=expr() { args.add(arg); }
      ("," arg=expr() { args.add(arg); })* ]
        {
            return args;
        }
}

ExprNode primary():
{
    Token t;
    ExprNode n;
}
{
      t=<INTEGER>
        {
            return integerNode(location(t), t.image);
        }
    | t=<CHARACTER>
        {
            return new IntegerLiteralNode(location(t),
                                          IntegerTypeRef.charRef(),
                                          characterCode(t.image));
        }
    | t=<STRING>
        {
            return new StringLiteralNode(location(t),
                new PointerTypeRef(IntegerTypeRef.charRef()),
                stringValue(t.image));
        }
    | t=<IDENTIFIER>
        {
            return new VariableNode(location(t), t.image);
        }
    | "(" n=expr() ")"
        {
            return n;
        }
}