// generated by gen_param_defs.py for 1a3d9cdca0fdb79585c7743e0669380b3a144bcfea465115d4378fd0348bf821
#ifndef MGB_PARAM
#define MGB_PARAM
class EmptyParamBase<string accessor> : MgbPackedParamBase<"Empty", accessor> {
    let fields = (ins
        
    );
}

def EmptyParam : EmptyParamBase<"param">;

class AxisParamBase<string accessor> : MgbPackedParamBase<"Axis", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "0">:$axis
    );
}

def AxisParam : AxisParamBase<"param">;

def ConvolutionV0Mode : MgbEnumAttr<"::megdnn::param::ConvolutionV0", "Mode", ["CROSS_CORRELATION","CONVOLUTION"], 0>;
def ConvolutionV0DataType : MgbEnumAttr<"::megdnn::param::ConvolutionV0", "DataType", ["FLOAT","INT8x8x16","INT8x8x32","FLOAT_IO16xC32","QUINT8x8x32","INT8x8xX","QUINT4x4x32"], 0>;
def ConvolutionV0Sparse : MgbEnumAttr<"::megdnn::param::ConvolutionV0", "Sparse", ["DENSE","GROUP"], 0>;
def ConvolutionV0Format : MgbEnumAttr<"::megdnn::param::ConvolutionV0", "Format", ["NCHW","NHWC","NHWCD4","NCHW4","NCHW8","NCHW32","NCHW88","NCHW44","NCHW44_DOT","NCHW_WINOGRAD","NCHW88_WINOGRAD","NCHW44_WINOGRAD","NCHW4_NCHW32","NCHW32_NCHW4","NCHW4_NCHW","NHWC_NCHW","NHWC_NCHW4_IC_SMALL","NCHW_NCHW4_IC_SMALL","CHWN4"], 0>;
def ConvolutionV1ComputeMode : MgbEnumAttr<"::megdnn::param::ConvolutionV1", "ComputeMode", ["DEFAULT","FLOAT32"], 0>;
def ConvolutionMode : MgbEnumAliasAttr<"::megdnn::param::Convolution", "Mode", ConvolutionV0Mode>;
def ConvolutionSparse : MgbEnumAliasAttr<"::megdnn::param::Convolution", "Sparse", ConvolutionV0Sparse>;
def ConvolutionFormat : MgbEnumAttr<"::megdnn::param::Convolution", "Format", ["NCHW","NHWC","NHWCD4","NCHW4","NCHW8","NCHW32","NCHW88","NCHW44","NCHW44_DOT","NCHW4_NCHW32","NCHW32_NCHW4","NCHW4_NCHW","NHWC_NCHW","NHWC_NCHW4_IC_SMALL","NCHW_NCHW4_IC_SMALL","CHWN4"], 0>;
def ConvolutionComputeMode : MgbEnumAliasAttr<"::megdnn::param::Convolution", "ComputeMode", ConvolutionV1ComputeMode>;
class ConvolutionParamBase<string accessor> : MgbPackedParamBase<"Convolution", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ConvolutionMode, "::megdnn::param::Convolution::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w,
        MgbDefaultValuedAttr<ConvolutionSparse, "::megdnn::param::Convolution::Sparse::DENSE">:$sparse,
        MgbDefaultValuedAttr<ConvolutionFormat, "::megdnn::param::Convolution::Format::NCHW">:$format,
        MgbDefaultValuedAttr<ConvolutionComputeMode, "::megdnn::param::Convolution::ComputeMode::DEFAULT">:$compute_mode
    );
}

def ConvolutionParam : ConvolutionParamBase<"param">;

class MaskPropagateParamBase<string accessor> : MgbPackedParamBase<"MaskPropagate", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$kernel_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$kernel_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w
    );
}

def MaskPropagateParam : MaskPropagateParamBase<"param">;

def ConvPoolingMethod : MgbEnumAttr<"::megdnn::param::ConvPooling", "Method", ["WITH_TEXTURE_OBJ","WITH_SHARED_MEM"], 0>;
def ConvPoolingConvMode : MgbEnumAliasAttr<"::megdnn::param::ConvPooling", "ConvMode", ConvolutionV0Mode>;
def ConvPoolingPoolMode : MgbEnumAttr<"::megdnn::param::ConvPooling", "PoolMode", ["AVERAGE","MAX"], 0>;
def ConvPoolingNonlineMode : MgbEnumAttr<"::megdnn::param::ConvPooling", "NonlineMode", ["IDENTITY","RELU","SIGMOID"], 0>;
class ConvPoolingParamBase<string accessor> : MgbPackedParamBase<"ConvPooling", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ConvPoolingMethod, "::megdnn::param::ConvPooling::Method::WITH_TEXTURE_OBJ">:$method,
        MgbDefaultValuedAttr<ConvPoolingConvMode, "::megdnn::param::ConvPooling::ConvMode::CROSS_CORRELATION">:$convMode,
        MgbDefaultValuedAttr<ConvPoolingPoolMode, "::megdnn::param::ConvPooling::PoolMode::AVERAGE">:$poolMode,
        MgbDefaultValuedAttr<ConvPoolingNonlineMode, "::megdnn::param::ConvPooling::NonlineMode::IDENTITY">:$nonlineMode,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pool_shape_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pool_shape_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pool_stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pool_stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pool_pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pool_pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$conv_stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$conv_stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$conv_pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$conv_pad_w
    );
}

def ConvPoolingParam : ConvPoolingParamBase<"param">;

def ConvBiasV0NonlineMode : MgbEnumAttr<"::megdnn::param::ConvBiasV0", "NonlineMode", ["IDENTITY","RELU","SIGMOID","H_SWISH"], 0>;
def ConvBiasNonlineMode : MgbEnumAliasAttr<"::megdnn::param::ConvBias", "NonlineMode", ConvBiasV0NonlineMode>;
def ConvBiasMode : MgbEnumAliasAttr<"::megdnn::param::ConvBias", "Mode", ConvolutionV0Mode>;
def ConvBiasSparse : MgbEnumAliasAttr<"::megdnn::param::ConvBias", "Sparse", ConvolutionV0Sparse>;
def ConvBiasFormat : MgbEnumAliasAttr<"::megdnn::param::ConvBias", "Format", ConvolutionFormat>;
def ConvBiasComputeMode : MgbEnumAliasAttr<"::megdnn::param::ConvBias", "ComputeMode", ConvolutionV1ComputeMode>;
class ConvBiasParamBase<string accessor> : MgbPackedParamBase<"ConvBias", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ConvBiasNonlineMode, "::megdnn::param::ConvBias::NonlineMode::IDENTITY">:$nonlineMode,
        MgbDefaultValuedAttr<ConvBiasMode, "::megdnn::param::ConvBias::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<ConvBiasSparse, "::megdnn::param::ConvBias::Sparse::DENSE">:$sparse,
        MgbDefaultValuedAttr<ConvBiasFormat, "::megdnn::param::ConvBias::Format::NCHW">:$format,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w,
        MgbDefaultValuedAttr<ConvBiasComputeMode, "::megdnn::param::ConvBias::ComputeMode::DEFAULT">:$compute_mode
    );
}

def ConvBiasParam : ConvBiasParamBase<"param">;

def SeparableConvMode : MgbEnumAliasAttr<"::megdnn::param::SeparableConv", "Mode", ConvolutionV0Mode>;
def SeparableConvBorderMode : MgbEnumAttr<"::megdnn::param::SeparableConv", "BorderMode", ["BORDER_REPLICATE","BORDER_REFLECT","BORDER_REFLECT_101","BORDER_WRAP","BORDER_CONSTANT","BORDER_TRANSPARENT","BORDER_ISOLATED"], 0>;
class SeparableConvParamBase<string accessor> : MgbPackedParamBase<"SeparableConv", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<SeparableConvMode, "::megdnn::param::SeparableConv::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<SeparableConvBorderMode, "::megdnn::param::SeparableConv::BorderMode::BORDER_REPLICATE">:$borderMode,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$is_symm_kernel,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_w
    );
}

def SeparableConvParam : SeparableConvParamBase<"param">;

class Images2NeibsParamBase<string accessor> : MgbPackedParamBase<"Images2Neibs", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$window_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$window_w
    );
}

def Images2NeibsParam : Images2NeibsParamBase<"param">;

def PoolingV0Mode : MgbEnumAttr<"::megdnn::param::PoolingV0", "Mode", ["MAX","AVERAGE","AVERAGE_COUNT_EXCLUDE_PADDING"], 0>;
def PoolingMode : MgbEnumAliasAttr<"::megdnn::param::Pooling", "Mode", PoolingV0Mode>;
def PoolingFormat : MgbEnumAliasAttr<"::megdnn::param::Pooling", "Format", ConvolutionFormat>;
class PoolingParamBase<string accessor> : MgbPackedParamBase<"Pooling", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<PoolingMode, "::megdnn::param::Pooling::Mode::MAX">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$window_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$window_w,
        MgbDefaultValuedAttr<PoolingFormat, "::megdnn::param::Pooling::Format::NCHW">:$format
    );
}

def PoolingParam : PoolingParamBase<"param">;

def AdaptivePoolingMode : MgbEnumAliasAttr<"::megdnn::param::AdaptivePooling", "Mode", PoolingV0Mode>;
def AdaptivePoolingFormat : MgbEnumAliasAttr<"::megdnn::param::AdaptivePooling", "Format", ConvolutionFormat>;
class AdaptivePoolingParamBase<string accessor> : MgbPackedParamBase<"AdaptivePooling", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<AdaptivePoolingMode, "::megdnn::param::AdaptivePooling::Mode::MAX">:$mode,
        MgbDefaultValuedAttr<AdaptivePoolingFormat, "::megdnn::param::AdaptivePooling::Format::NCHW">:$format
    );
}

def AdaptivePoolingParam : AdaptivePoolingParamBase<"param">;

class LRNParamBase<string accessor> : MgbPackedParamBase<"LRN", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "5">:$n,
        MgbDefaultValuedAttr<MgbF32Attr, "2.f">:$k,
        MgbDefaultValuedAttr<MgbF32Attr, "1e-4f">:$alpha,
        MgbDefaultValuedAttr<MgbF32Attr, "0.75f">:$beta
    );
}

def LRNParam : LRNParamBase<"param">;

def BNParamDim : MgbEnumAttr<"::megdnn::param::BN", "ParamDim", ["DIM_11HW","DIM_1CHW","DIM_1C11"], 0>;
def BNFwdMode : MgbEnumAttr<"::megdnn::param::BN", "FwdMode", ["TRAINING","INFERENCE"], 0>;
class BNParamBase<string accessor> : MgbPackedParamBase<"BN", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<BNParamDim, "::megdnn::param::BN::ParamDim::DIM_11HW">:$param_dim,
        MgbDefaultValuedAttr<BNFwdMode, "::megdnn::param::BN::FwdMode::TRAINING">:$fwd_mode,
        MgbDefaultValuedAttr<MgbF64Attr, "1e-4f">:$epsilon,
        MgbDefaultValuedAttr<MgbF64Attr, "1.f">:$avg_factor,
        MgbDefaultValuedAttr<MgbF32Attr, "1.f">:$scale,
        MgbDefaultValuedAttr<MgbF32Attr, "0.f">:$bias
    );
}

def BNParam : BNParamBase<"param">;

def ROIPoolingMode : MgbEnumAttr<"::megdnn::param::ROIPooling", "Mode", ["MAX","AVERAGE"], 0>;
class ROIPoolingParamBase<string accessor> : MgbPackedParamBase<"ROIPooling", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ROIPoolingMode, "::megdnn::param::ROIPooling::Mode::MAX">:$mode,
        MgbDefaultValuedAttr<MgbF32Attr, "1.f">:$scale
    );
}

def ROIPoolingParam : ROIPoolingParamBase<"param">;

def WarpPerspectiveV1InterpolationMode : MgbEnumAttr<"::megdnn::param::WarpPerspectiveV1", "InterpolationMode", ["NEAREST","LINEAR","AREA","CUBIC","LANCZOS4"], 0>;
def WarpPerspectiveV1BorderMode : MgbEnumAttr<"::megdnn::param::WarpPerspectiveV1", "BorderMode", ["REPLICATE","REFLECT","REFLECT_101","WRAP","CONSTANT","TRANSPARENT","ISOLATED"], 0>;
def WarpPerspectiveInterpolationMode : MgbEnumAliasAttr<"::megdnn::param::WarpPerspective", "InterpolationMode", WarpPerspectiveV1InterpolationMode>;
def WarpPerspectiveBorderMode : MgbEnumAliasAttr<"::megdnn::param::WarpPerspective", "BorderMode", WarpPerspectiveV1BorderMode>;
def WarpPerspectiveFormat : MgbEnumAliasAttr<"::megdnn::param::WarpPerspective", "Format", ConvolutionFormat>;
class WarpPerspectiveParamBase<string accessor> : MgbPackedParamBase<"WarpPerspective", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<WarpPerspectiveInterpolationMode, "::megdnn::param::WarpPerspective::InterpolationMode::LINEAR">:$imode,
        MgbDefaultValuedAttr<WarpPerspectiveBorderMode, "::megdnn::param::WarpPerspective::BorderMode::REPLICATE">:$bmode,
        MgbDefaultValuedAttr<WarpPerspectiveFormat, "::megdnn::param::WarpPerspective::Format::NCHW">:$format,
        MgbDefaultValuedAttr<MgbF32Attr, ".0f">:$border_val
    );
}

def WarpPerspectiveParam : WarpPerspectiveParamBase<"param">;

def SpatialTfGridGeneratorMode : MgbEnumAttr<"::megdnn::param::SpatialTfGridGenerator", "Mode", ["AFFINE"], 0>;
class SpatialTfGridGeneratorParamBase<string accessor> : MgbPackedParamBase<"SpatialTfGridGenerator", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<SpatialTfGridGeneratorMode, "::megdnn::param::SpatialTfGridGenerator::Mode::AFFINE">:$mode
    );
}

def SpatialTfGridGeneratorParam : SpatialTfGridGeneratorParamBase<"param">;

def SpatialTfSamplerMode : MgbEnumAttr<"::megdnn::param::SpatialTfSampler", "Mode", ["BILINEAR"], 0>;
class SpatialTfSamplerParamBase<string accessor> : MgbPackedParamBase<"SpatialTfSampler", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<SpatialTfSamplerMode, "::megdnn::param::SpatialTfSampler::Mode::BILINEAR">:$mode
    );
}

def SpatialTfSamplerParam : SpatialTfSamplerParamBase<"param">;

class AddUpdateParamBase<string accessor> : MgbPackedParamBase<"AddUpdate", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbF32Attr, "1.f">:$alpha,
        MgbDefaultValuedAttr<MgbF32Attr, "1.f">:$beta,
        MgbDefaultValuedAttr<MgbF32Attr, "0.f">:$bias
    );
}

def AddUpdateParam : AddUpdateParamBase<"param">;

def ElemwiseMode : MgbEnumAttr<"::megdnn::param::Elemwise", "Mode", ["RELU","ABS","ACOS","ASIN","CEIL","COS","EXP","EXPM1","FLOOR","LOG","LOG1P","NEGATE","SIGMOID","SIN","TANH","ABS_GRAD","ADD","FLOOR_DIV","MAX","MIN","MOD","MUL","POW","SIGMOID_GRAD","SUB","SWITCH_GT0","TANH_GRAD","TRUE_DIV","LOG_SUM_EXP","LT","LEQ","EQ","SHL","SHR","COND_LEQ_MOV","FUSE_MUL_ADD3","FUSE_MUL_ADD4","FUSE_ADD_RELU","FUSE_ADD_SIGMOID","FUSE_ADD_TANH","FAST_TANH","FAST_TANH_GRAD","ROUND","RMULH","ATAN2","ERF","ERFINV","ERFC","ERFCINV","H_SWISH","H_SWISH_GRAD","FUSE_ADD_H_SWISH","NOT","AND","OR","XOR"], 0, 1>;
class ElemwiseParamBase<string accessor> : MgbPackedParamBase<"Elemwise", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ElemwiseMode, "::megdnn::param::Elemwise::Mode::RELU">:$mode
    );
}

def ElemwiseParam : ElemwiseParamBase<"param">;

def ElemwiseMultiTypeMode : MgbEnumAttr<"::megdnn::param::ElemwiseMultiType", "Mode", ["FUSE_MUL_ADD3_INT16x32x32x32","FUSE_MUL_ADD3_IXxF32xF32xI8","ROUND_SHR_SATURATE_IXxI8xI8","FUSE_ADD_RMULH_ROUND_SHR_SATURATE_INT16x16x16x8","FUSE_ADD_RMULH_ROUND_SHR_SATURATE_INT32x32x32x8","ROUND_SHR_SATURATE_IXxI8xI16","QADD","QFUSE_ADD_RELU","QMUL","QMIN","QMAX","QSUB","QTRUE_DIV","QFUSE_ADD_SIGMOID","QFUSE_ADD_TANH","QRELU","QABS","QSIGMOID","QEXP","QTANH","QFUSE_MUL_ADD3","QFAST_TANH","QNEGATE","QACOS","QASIN","QCEIL","QCOS","QEXPM1","QFLOOR","QLOG","QLOG1P","QSIN","QROUND","QERF","QERFINV","QERFC","QERFCINV","QABS_GRAD","QFLOOR_DIV","QMOD","QSIGMOID_GRAD","QSWITCH_GT0","QTANH_GRAD","QLT","QLEQ","QEQ","QPOW","QLOG_SUM_EXP","QFAST_TANH_GRAD","QATAN2","QCOND_LEQ_MOV","QH_SWISH","QFUSE_ADD_H_SWISH","QH_SWISH_GRAD"], 0, 1>;
class ElemwiseMultiTypeParamBase<string accessor> : MgbPackedParamBase<"ElemwiseMultiType", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ElemwiseMultiTypeMode, "::megdnn::param::ElemwiseMultiType::Mode::FUSE_MUL_ADD3_INT16x32x32x32">:$mode
    );
}

def ElemwiseMultiTypeParam : ElemwiseMultiTypeParamBase<"param">;

class PowCParamBase<string accessor> : MgbPackedParamBase<"PowC", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbF32Attr, "0">:$exp
    );
}

def PowCParam : PowCParamBase<"param">;

def DctChannelSelectV0FastImpl : MgbEnumAttr<"::megdnn::param::DctChannelSelectV0", "FastImpl", ["NONE","FIX_32_MASK"], 0>;
def DctChannelSelectFormat : MgbEnumAliasAttr<"::megdnn::param::DctChannelSelect", "Format", ConvolutionFormat>;
def DctChannelSelectFastImpl : MgbEnumAliasAttr<"::megdnn::param::DctChannelSelect", "FastImpl", DctChannelSelectV0FastImpl>;
class DctChannelSelectParamBase<string accessor> : MgbPackedParamBase<"DctChannelSelect", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<DctChannelSelectFormat, "::megdnn::param::DctChannelSelect::Format::NCHW">:$format,
        MgbDefaultValuedAttr<DctChannelSelectFastImpl, "::megdnn::param::DctChannelSelect::FastImpl::NONE">:$fastImpl,
        MgbDefaultValuedAttr<MgbI32Attr, "8">:$dct_block_size
    );
}

def DctChannelSelectParam : DctChannelSelectParamBase<"param">;

def MatrixMulV0DataType : MgbEnumAttr<"::megdnn::param::MatrixMulV0", "DataType", ["FLOAT","INT8x8x16","INT8x8x32","FLOAT_IO16xC32","QUINT8x8x32","QUINT4x4x32"], 0>;
def MatrixMulV1ComputeMode : MgbEnumAttr<"::megdnn::param::MatrixMulV1", "ComputeMode", ["DEFAULT","FLOAT32"], 0>;
def MatrixMulComputeMode : MgbEnumAliasAttr<"::megdnn::param::MatrixMul", "ComputeMode", MatrixMulV1ComputeMode>;
def MatrixMulFormat : MgbEnumAttr<"::megdnn::param::MatrixMul", "Format", ["DEFAULT","MK4","MK8","MK4_DOT"], 0>;
class MatrixMulParamBase<string accessor> : MgbPackedParamBase<"MatrixMul", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$transposeA,
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$transposeB,
        MgbDefaultValuedAttr<MatrixMulComputeMode, "::megdnn::param::MatrixMul::ComputeMode::DEFAULT">:$compute_mode,
        MgbDefaultValuedAttr<MatrixMulFormat, "::megdnn::param::MatrixMul::Format::DEFAULT">:$format
    );
}

def MatrixMulParam : MatrixMulParamBase<"param">;

class SVDParamBase<string accessor> : MgbPackedParamBase<"SVD", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$full_matrices,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$compute_uv
    );
}

def SVDParam : SVDParamBase<"param">;

def ReduceV0Mode : MgbEnumAttr<"::megdnn::param::ReduceV0", "Mode", ["SUM","SUM_SQR","PRODUCT","MIN","MAX"], 0>;
def ReduceV1Mode : MgbEnumAttr<"::megdnn::param::ReduceV1", "Mode", ["SUM","SUM_SQR","PRODUCT","MIN","MAX","MEAN"], 0>;
def ReduceV1DataType : MgbEnumAttr<"::megdnn::param::ReduceV1", "DataType", ["DEFAULT","FLOAT_IO16xC32","FLOAT_O32xC32","FLOAT_O16xC32","QUINT_I8xO32","QINT_I8xO32"], 0>;
def ReduceMode : MgbEnumAttr<"::megdnn::param::Reduce", "Mode", ["SUM","SUM_SQR","PRODUCT","MIN","MAX","MEAN"], 0>;
def ReduceDataType : MgbEnumAttr<"::megdnn::param::Reduce", "DataType", ["DEFAULT","FLOAT_IO16xC32","FLOAT_O32xC32","FLOAT_O16xC32","QUINT_I8xO32","QINT_I8xO32"], 0>;
class ReduceParamBase<string accessor> : MgbPackedParamBase<"Reduce", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ReduceMode, "::megdnn::param::Reduce::Mode::SUM">:$mode,
        MgbDefaultValuedAttr<MgbI32Attr, "2147483647">:$axis,
        MgbDefaultValuedAttr<ReduceDataType, "::megdnn::param::Reduce::DataType::DEFAULT">:$data_type
    );
}

def ReduceParam : ReduceParamBase<"param">;

class CumsumParamBase<string accessor> : MgbPackedParamBase<"Cumsum", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "2147483647">:$axis,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$exclusive,
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$reverse
    );
}

def CumsumParam : CumsumParamBase<"param">;

def CondTakeMode : MgbEnumAttr<"::megdnn::param::CondTake", "Mode", ["EQ","NEQ","LT","LEQ","GT","GEQ"], 0>;
class CondTakeParamBase<string accessor> : MgbPackedParamBase<"CondTake", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CondTakeMode, "::megdnn::param::CondTake::Mode::EQ">:$mode,
        MgbDefaultValuedAttr<MgbF32Attr, "0">:$val,
        MgbDefaultValuedAttr<MgbF32Attr, "1e-06">:$eps
    );
}

def CondTakeParam : CondTakeParamBase<"param">;

def ArgsortOrder : MgbEnumAttr<"::megdnn::param::Argsort", "Order", ["ASCENDING","DESCENDING"], 0>;
class ArgsortParamBase<string accessor> : MgbPackedParamBase<"Argsort", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ArgsortOrder, "::megdnn::param::Argsort::Order::ASCENDING">:$order
    );
}

def ArgsortParam : ArgsortParamBase<"param">;

class IndexingRemapParamBase<string accessor> : MgbPackedParamBase<"IndexingRemap", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$is_non_overlapping
    );
}

def IndexingRemapParam : IndexingRemapParamBase<"param">;

class SleepParamBase<string accessor> : MgbPackedParamBase<"Sleep", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbF32Attr, "0">:$time
    );
}

def SleepParam : SleepParamBase<"param">;

class LinspaceParamBase<string accessor> : MgbPackedParamBase<"Linspace", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$endpoint
    );
}

def LinspaceParam : LinspaceParamBase<"param">;

class LinspaceFullParamBase<string accessor> : MgbPackedParamBase<"LinspaceFull", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbF64Attr, "0">:$start,
        MgbDefaultValuedAttr<MgbF64Attr, "1">:$stop,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$endpoint
    );
}

def LinspaceFullParam : LinspaceFullParamBase<"param">;

def EyeParam: MgbParamBase<"Eye"> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "0">:$k,
        MgbDefaultValuedAttr<MgbDTypeAttr, "megdnn::DType::from_enum(megdnn::DTypeEnum::Float32)">:$dtype
    );
}

class UniformRNGParamBase<string accessor> : MgbPackedParamBase<"UniformRNG", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI64Attr, "0">:$seed
    );
}

def UniformRNGParam : UniformRNGParamBase<"param">;

class GaussianRNGParamBase<string accessor> : MgbPackedParamBase<"GaussianRNG", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI64Attr, "0">:$seed,
        MgbDefaultValuedAttr<MgbF32Attr, "0">:$mean,
        MgbDefaultValuedAttr<MgbF32Attr, "1">:$std
    );
}

def GaussianRNGParam : GaussianRNGParamBase<"param">;

class FlipParamBase<string accessor> : MgbPackedParamBase<"Flip", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$vertical,
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$horizontal
    );
}

def FlipParam : FlipParamBase<"param">;

class RotateParamBase<string accessor> : MgbPackedParamBase<"Rotate", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$clockwise
    );
}

def RotateParam : RotateParamBase<"param">;

class ROICopyParamBase<string accessor> : MgbPackedParamBase<"ROICopy", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$row_from,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$row_to,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$col_from,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$col_to
    );
}

def ROICopyParam : ROICopyParamBase<"param">;

def CvtColorMode : MgbEnumAttr<"::megdnn::param::CvtColor", "Mode", ["RGB2GRAY","RGB2YUV","YUV2RGB","GRAY2RGB","RGBA2RGB","RGBA2BGR","RGBA2GRAY","RGB2BGR","BGR2GRAY","BGR2RGB","YUV2GRAY_NV21","YUV2RGB_NV21","YUV2BGR_NV21","YUV2GRAY_NV12","YUV2RGB_NV12","YUV2BGR_NV12","YUV2GRAY_YV12","YUV2RGB_YV12","YUV2BGR_YV12","YUV2GRAY_YU12","YUV2RGB_YU12","YUV2BGR_YU12","YCrCb2RGB","YCrCb2BGR","BT601_YUV2RGB_NV21","BT601_YUV2BGR_NV21","BT601_YUV2RGB_NV12","BT601_YUV2BGR_NV12","BT601_YUV2RGB_YV12","BT601_YUV2BGR_YV12","BT601_YUV2RGB_YU12","BT601_YUV2BGR_YU12"], 0>;
class CvtColorParamBase<string accessor> : MgbPackedParamBase<"CvtColor", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CvtColorMode, "::megdnn::param::CvtColor::Mode::RGB2GRAY">:$mode
    );
}

def CvtColorParam : CvtColorParamBase<"param">;

def WarpAffineInterpolationMode : MgbEnumAliasAttr<"::megdnn::param::WarpAffine", "InterpolationMode", WarpPerspectiveV1InterpolationMode>;
def WarpAffineBorderMode : MgbEnumAliasAttr<"::megdnn::param::WarpAffine", "BorderMode", WarpPerspectiveV1BorderMode>;
def WarpAffineFormat : MgbEnumAliasAttr<"::megdnn::param::WarpAffine", "Format", ConvolutionFormat>;
class WarpAffineParamBase<string accessor> : MgbPackedParamBase<"WarpAffine", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<WarpAffineInterpolationMode, "::megdnn::param::WarpAffine::InterpolationMode::LINEAR">:$imode,
        MgbDefaultValuedAttr<WarpAffineBorderMode, "::megdnn::param::WarpAffine::BorderMode::REPLICATE">:$border_mode,
        MgbDefaultValuedAttr<MgbF32Attr, ".0f">:$border_val,
        MgbDefaultValuedAttr<WarpAffineFormat, "::megdnn::param::WarpAffine::Format::NHWC">:$format
    );
}

def WarpAffineParam : WarpAffineParamBase<"param">;

def GaussianBlurBorderMode : MgbEnumAliasAttr<"::megdnn::param::GaussianBlur", "BorderMode", WarpPerspectiveV1BorderMode>;
class GaussianBlurParamBase<string accessor> : MgbPackedParamBase<"GaussianBlur", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<GaussianBlurBorderMode, "::megdnn::param::GaussianBlur::BorderMode::REPLICATE">:$border_mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$kernel_height,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$kernel_width,
        MgbDefaultValuedAttr<MgbF32Attr, "0.f">:$sigma_x,
        MgbDefaultValuedAttr<MgbF32Attr, "0.f">:$sigma_y
    );
}

def GaussianBlurParam : GaussianBlurParamBase<"param">;

def ResizeInterpolationMode : MgbEnumAliasAttr<"::megdnn::param::Resize", "InterpolationMode", WarpPerspectiveV1InterpolationMode>;
def ResizeFormat : MgbEnumAliasAttr<"::megdnn::param::Resize", "Format", ConvolutionFormat>;
class ResizeParamBase<string accessor> : MgbPackedParamBase<"Resize", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ResizeInterpolationMode, "::megdnn::param::Resize::InterpolationMode::LINEAR">:$imode,
        MgbDefaultValuedAttr<ResizeFormat, "::megdnn::param::Resize::Format::NHWC">:$format
    );
}

def ResizeParam : ResizeParamBase<"param">;

def RemapInterpolationMode : MgbEnumAliasAttr<"::megdnn::param::Remap", "InterpolationMode", WarpPerspectiveV1InterpolationMode>;
def RemapBorderMode : MgbEnumAliasAttr<"::megdnn::param::Remap", "BorderMode", WarpPerspectiveV1BorderMode>;
def RemapFormat : MgbEnumAliasAttr<"::megdnn::param::Remap", "Format", ConvolutionFormat>;
class RemapParamBase<string accessor> : MgbPackedParamBase<"Remap", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<RemapInterpolationMode, "::megdnn::param::Remap::InterpolationMode::LINEAR">:$imode,
        MgbDefaultValuedAttr<RemapBorderMode, "::megdnn::param::Remap::BorderMode::REPLICATE">:$border_type,
        MgbDefaultValuedAttr<RemapFormat, "::megdnn::param::Remap::Format::NHWC">:$format,
        MgbDefaultValuedAttr<MgbF32Attr, "0.f">:$scalar
    );
}

def RemapParam : RemapParamBase<"param">;

def Convolution3DMode : MgbEnumAttr<"::megdnn::param::Convolution3D", "Mode", ["CROSS_CORRELATION","CONVOLUTION"], 0>;
def Convolution3DSparse : MgbEnumAttr<"::megdnn::param::Convolution3D", "Sparse", ["DENSE","GROUP"], 0>;
def Convolution3DDataType : MgbEnumAttr<"::megdnn::param::Convolution3D", "DataType", ["FLOAT","FLOAT_IO16xC32"], 0>;
def Convolution3DFormat : MgbEnumAttr<"::megdnn::param::Convolution3D", "Format", ["NCDHW","NDHWC"], 0>;
class Convolution3DParamBase<string accessor> : MgbPackedParamBase<"Convolution3D", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<Convolution3DMode, "::megdnn::param::Convolution3D::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w,
        MgbDefaultValuedAttr<Convolution3DSparse, "::megdnn::param::Convolution3D::Sparse::DENSE">:$sparse,
        MgbDefaultValuedAttr<Convolution3DDataType, "::megdnn::param::Convolution3D::DataType::FLOAT">:$data_type,
        MgbDefaultValuedAttr<Convolution3DFormat, "::megdnn::param::Convolution3D::Format::NCDHW">:$format
    );
}

def Convolution3DParam : Convolution3DParamBase<"param">;

def Conv3DBiasNonlineMode : MgbEnumAttr<"::megdnn::param::Conv3DBias", "NonlineMode", ["IDENTITY","RELU","SIGMOID"], 0>;
def Conv3DBiasMode : MgbEnumAliasAttr<"::megdnn::param::Conv3DBias", "Mode", Convolution3DMode>;
class Conv3DBiasParamBase<string accessor> : MgbPackedParamBase<"Conv3DBias", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<Conv3DBiasNonlineMode, "::megdnn::param::Conv3DBias::NonlineMode::IDENTITY">:$nonlineMode,
        MgbDefaultValuedAttr<Conv3DBiasMode, "::megdnn::param::Conv3DBias::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$stride_w
    );
}

def Conv3DBiasParam : Conv3DBiasParamBase<"param">;

def SeparableConv3DMode : MgbEnumAliasAttr<"::megdnn::param::SeparableConv3D", "Mode", Convolution3DMode>;
def SeparableConv3DBorderMode : MgbEnumAttr<"::megdnn::param::SeparableConv3D", "BorderMode", ["BORDER_REPLICATE","BORDER_REFLECT","BORDER_REFLECT_101","BORDER_WRAP","BORDER_CONSTANT","BORDER_TRANSPARENT","BORDER_ISOLATED"], 0>;
class SeparableConv3DParamBase<string accessor> : MgbPackedParamBase<"SeparableConv3D", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<SeparableConv3DMode, "::megdnn::param::SeparableConv3D::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<SeparableConv3DBorderMode, "::megdnn::param::SeparableConv3D::BorderMode::BORDER_REPLICATE">:$borderMode,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$is_symm_kernel,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$stride_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$ksize_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$anchor_d,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_w
    );
}

def SeparableConv3DParam : SeparableConv3DParamBase<"param">;

def TopKMode : MgbEnumAttr<"::megdnn::param::TopK", "Mode", ["KTH_ONLY","VALUE_IDX_NOSORT","VALUE_IDX_SORTED"], 0>;
class TopKParamBase<string accessor> : MgbPackedParamBase<"TopK", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<TopKMode, "::megdnn::param::TopK::Mode::KTH_ONLY">:$mode
    );
}

def TopKParam : TopKParamBase<"param">;

def RelayoutFormatV0Mode : MgbEnumAttr<"::megdnn::param::RelayoutFormatV0", "Mode", ["NHWC_NHWCD4","NHWCD4_NHWC","NHWC_NHWCD4I","NCHW_NHWCD4","NCHW_NHWCD4I","NHWCD4I_NCHW","NHWCD4_NCHW","INTER_WEIGHT_DENSE","INTER_WEIGHT_DENSEI","INTER_WEIGHT_GROUP","INTER_WEIGHT_GROUPI","INTER_WEIGHT_CHAN","INTER_WEIGHT_CHANI","INTER_WEIGHT_DENSEI_DOT","INTER_WEIGHT_GROUPI_DOT","NCHW4_CHWN4","CHWN4_NCHW4","NCHW_NCHW88_CONV_DENSE_WEIGHT","NCHW_NCHW88_CONV_CHAN_WEIGHT","NCHW_NCHW88_CONV_GROUP_WEIGHT","NCHW_NCHW88","NCHW88_NCHW","NCHW_NCHW4_IC_SMALL","NCHW_NCHW4_IC_SMALL_CONV_DENSE_WEIGHT","NCHW_NCHW4","NCHW4_NCHW","NCHW_NCHW4_WEIGHT"], 0>;
def RelayoutFormatMode : MgbEnumAliasAttr<"::megdnn::param::RelayoutFormat", "Mode", RelayoutFormatV0Mode>;
class RelayoutFormatParamBase<string accessor> : MgbPackedParamBase<"RelayoutFormat", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<RelayoutFormatMode, "::megdnn::param::RelayoutFormat::Mode::NHWC_NHWCD4">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$oc,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$group
    );
}

def RelayoutFormatParam : RelayoutFormatParamBase<"param">;

def SeparableFilterFormat : MgbEnumAliasAttr<"::megdnn::param::SeparableFilter", "Format", ConvolutionFormat>;
def SeparableFilterBorderMode : MgbEnumAliasAttr<"::megdnn::param::SeparableFilter", "BorderMode", WarpPerspectiveV1BorderMode>;
class SeparableFilterParamBase<string accessor> : MgbPackedParamBase<"SeparableFilter", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<SeparableFilterFormat, "::megdnn::param::SeparableFilter::Format::NCHW">:$format,
        MgbDefaultValuedAttr<SeparableFilterBorderMode, "::megdnn::param::SeparableFilter::BorderMode::REPLICATE">:$borderMode,
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$is_symm_kernel,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "3">:$ksize_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$anchor_w
    );
}

def SeparableFilterParam : SeparableFilterParamBase<"param">;

def LocalShareMode : MgbEnumAliasAttr<"::megdnn::param::LocalShare", "Mode", ConvolutionV0Mode>;
def LocalShareSparse : MgbEnumAliasAttr<"::megdnn::param::LocalShare", "Sparse", ConvolutionV0Sparse>;
def LocalShareFormat : MgbEnumAliasAttr<"::megdnn::param::LocalShare", "Format", ConvolutionFormat>;
def LocalShareComputeMode : MgbEnumAliasAttr<"::megdnn::param::LocalShare", "ComputeMode", ConvolutionV1ComputeMode>;
class LocalShareParamBase<string accessor> : MgbPackedParamBase<"LocalShare", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<LocalShareMode, "::megdnn::param::LocalShare::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$spatial_groups_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$spatial_groups_w,
        MgbDefaultValuedAttr<LocalShareSparse, "::megdnn::param::LocalShare::Sparse::DENSE">:$sparse,
        MgbDefaultValuedAttr<LocalShareFormat, "::megdnn::param::LocalShare::Format::NCHW">:$format,
        MgbDefaultValuedAttr<LocalShareComputeMode, "::megdnn::param::LocalShare::ComputeMode::DEFAULT">:$computeMode
    );
}

def LocalShareParam : LocalShareParamBase<"param">;

def ROIAlignV0Mode : MgbEnumAttr<"::megdnn::param::ROIAlignV0", "Mode", ["MAX","AVERAGE"], 0>;
def ROIAlignMode : MgbEnumAliasAttr<"::megdnn::param::ROIAlign", "Mode", ROIAlignV0Mode>;
def ROIAlignFormat : MgbEnumAliasAttr<"::megdnn::param::ROIAlign", "Format", ConvolutionFormat>;
class ROIAlignParamBase<string accessor> : MgbPackedParamBase<"ROIAlign", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ROIAlignMode, "::megdnn::param::ROIAlign::Mode::MAX">:$mode,
        MgbDefaultValuedAttr<ROIAlignFormat, "::megdnn::param::ROIAlign::Format::NCHW">:$format,
        MgbDefaultValuedAttr<MgbF32Attr, "1.0">:$spatial_scale,
        MgbDefaultValuedAttr<MgbF32Attr, "0.0">:$offset,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pooled_height,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pooled_width,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$sample_height,
        MgbDefaultValuedAttr<MgbUI32Attr, "2">:$sample_width
    );
}

def ROIAlignParam : ROIAlignParamBase<"param">;

class DeformablePSROIPoolingParamBase<string accessor> : MgbPackedParamBase<"DeformablePSROIPooling", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "true">:$no_trans,
        MgbDefaultValuedAttr<MgbF32Attr, "1">:$spatial_scale,
        MgbDefaultValuedAttr<MgbF32Attr, "1">:$trans_std,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pooled_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$pooled_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$part_size,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$sample_per_part
    );
}

def DeformablePSROIPoolingParam : DeformablePSROIPoolingParamBase<"param">;

def BatchConvBiasNonlineMode : MgbEnumAliasAttr<"::megdnn::param::BatchConvBias", "NonlineMode", ConvBiasV0NonlineMode>;
def BatchConvBiasMode : MgbEnumAliasAttr<"::megdnn::param::BatchConvBias", "Mode", ConvolutionV0Mode>;
def BatchConvBiasSparse : MgbEnumAliasAttr<"::megdnn::param::BatchConvBias", "Sparse", ConvolutionV0Sparse>;
def BatchConvBiasFormat : MgbEnumAliasAttr<"::megdnn::param::BatchConvBias", "Format", ConvolutionFormat>;
def BatchConvBiasComputeMode : MgbEnumAliasAttr<"::megdnn::param::BatchConvBias", "ComputeMode", ConvolutionV1ComputeMode>;
class BatchConvBiasParamBase<string accessor> : MgbPackedParamBase<"BatchConvBias", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<BatchConvBiasNonlineMode, "::megdnn::param::BatchConvBias::NonlineMode::IDENTITY">:$nonlineMode,
        MgbDefaultValuedAttr<BatchConvBiasMode, "::megdnn::param::BatchConvBias::Mode::CROSS_CORRELATION">:$mode,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "0">:$pad_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$stride_w,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_h,
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$dilate_w,
        MgbDefaultValuedAttr<BatchConvBiasSparse, "::megdnn::param::BatchConvBias::Sparse::DENSE">:$sparse,
        MgbDefaultValuedAttr<BatchConvBiasFormat, "::megdnn::param::BatchConvBias::Format::NCHW">:$format,
        MgbDefaultValuedAttr<BatchConvBiasComputeMode, "::megdnn::param::BatchConvBias::ComputeMode::DEFAULT">:$compute_mode
    );
}

def BatchConvBiasParam : BatchConvBiasParamBase<"param">;

class FakeQuantParamBase<string accessor> : MgbPackedParamBase<"FakeQuant", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "-2147483648">:$qmin,
        MgbDefaultValuedAttr<MgbI32Attr, "2147483647">:$qmax
    );
}

def FakeQuantParam : FakeQuantParamBase<"param">;

class TQTParamBase<string accessor> : MgbPackedParamBase<"TQT", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "-2147483648">:$qmin,
        MgbDefaultValuedAttr<MgbI32Attr, "2147483647">:$qmax
    );
}

def TQTParam : TQTParamBase<"param">;

def DTypeParam: MgbParamBase<"DType"> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbDTypeAttr, "megdnn::DType::from_enum(megdnn::DTypeEnum::Byte)">:$dtype
    );
}

class PersistentOutputStorageParamBase<string accessor> : MgbPackedParamBase<"PersistentOutputStorage", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "-1">:$share_key
    );
}

def PersistentOutputStorageParam : PersistentOutputStorageParamBase<"param">;

class OptionalAxisParamBase<string accessor> : MgbPackedParamBase<"OptionalAxis", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "-1">:$axis
    );
}

def OptionalAxisParam : OptionalAxisParamBase<"param">;

class OptionalAxisV1ParamBase<string accessor> : MgbPackedParamBase<"OptionalAxisV1", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbI32Attr, "::megdnn::param::OptionalAxisV1::INVALID_AXIS">:$axis
    );
}

def OptionalAxisV1Param : OptionalAxisV1ParamBase<"param">;

def ExecutionPolicyV0Strategy : MgbEnumAttr<"::megdnn::param::ExecutionPolicyV0", "Strategy", ["HEURISTIC","HEURISTIC_REPRODUCIBLE","PROFILE","PROFILE_REPRODUCIBLE","PROFILE_HEURISTIC"], 0>;
def ExecutionPolicyStrategy : MgbEnumAttr<"::megdnn::param::ExecutionPolicy", "Strategy", ["HEURISTIC","PROFILE","REPRODUCIBLE","OPTIMIZED"], 1>;
class ExecutionPolicyParamBase<string accessor> : MgbPackedParamBase<"ExecutionPolicy", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<ExecutionPolicyStrategy, "static_cast<::megdnn::param::ExecutionPolicy::Strategy>(1)">:$strategy,
        MgbDefaultValuedAttr<MgbUI64Attr, "18446744073709551615ull">:$workspace_limit
    );
}

def ExecutionPolicyParam : ExecutionPolicyParamBase<"param">;

class AssertEqualParamBase<string accessor> : MgbPackedParamBase<"AssertEqual", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbF32Attr, "0.0001">:$maxerr,
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$verbose
    );
}

def AssertEqualParam : AssertEqualParamBase<"param">;

class FpgaConvParamBase<string accessor> : MgbPackedParamBase<"FpgaConv", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$need_output_quantize,
        MgbDefaultValuedAttr<MgbBoolAttr, "false">:$need_output_threshold,
        MgbDefaultValuedAttr<MgbI32Attr, "1">:$stride,
        MgbDefaultValuedAttr<MgbI32Attr, "2">:$input_bit_width,
        MgbDefaultValuedAttr<MgbI32Attr, "2">:$output_bit_width,
        MgbDefaultValuedAttr<MgbI32Attr, "2">:$weight_bit_width,
        MgbDefaultValuedAttr<MgbI32Attr, "0">:$thres0,
        MgbDefaultValuedAttr<MgbI32Attr, "1">:$thres1,
        MgbDefaultValuedAttr<MgbUI32Attr, "4">:$unpool_size,
        MgbDefaultValuedAttr<MgbUI32Attr, "4">:$direct_size
    );
}

def FpgaConvParam : FpgaConvParamBase<"param">;

def CollectiveCommMode : MgbEnumAttr<"::megdnn::param::CollectiveComm", "Mode", ["REDUCE_SUM","BROADCAST","ALL_GATHER","REDUCE_SCATTER_SUM","ALL_REDUCE_SUM","ALL_REDUCE_MAX","ALL_REDUCE_MIN","ALL_REDUCE_PROD","GATHER","SCATTER","ALL_TO_ALL"], 0>;
class CollectiveCommParamBase<string accessor> : MgbPackedParamBase<"CollectiveComm", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CollectiveCommMode, "::megdnn::param::CollectiveComm::Mode::REDUCE_SUM">:$mode
    );
}

def CollectiveCommParam : CollectiveCommParamBase<"param">;

class FakeSerializedDTypeParamBase<string accessor> : MgbPackedParamBase<"FakeSerializedDType", accessor> {
    let fields = (ins
        
    );
}

def FakeSerializedDTypeParam : FakeSerializedDTypeParamBase<"param">;

def CondExecPredMode : MgbEnumAttr<"::megdnn::param::CondExecPred", "Mode", ["CASE","CASE_FALLBACK","PIECEWISE"], 0>;
class CondExecPredParamBase<string accessor> : MgbPackedParamBase<"CondExecPred", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CondExecPredMode, "::megdnn::param::CondExecPred::Mode::CASE">:$mode,
        MgbDefaultValuedAttr<MgbF32Attr, "0.0001">:$eps
    );
}

def CondExecPredParam : CondExecPredParamBase<"param">;

def CondExecPredLogicalMode : MgbEnumAttr<"::megdnn::param::CondExecPredLogical", "Mode", ["OR","AND","XOR","NOR","NAND","XNOR"], 0>;
class CondExecPredLogicalParamBase<string accessor> : MgbPackedParamBase<"CondExecPredLogical", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CondExecPredLogicalMode, "::megdnn::param::CondExecPredLogical::Mode::OR">:$mode
    );
}

def CondExecPredLogicalParam : CondExecPredLogicalParamBase<"param">;

def CondExecMarkGradMode : MgbEnumAttr<"::megdnn::param::CondExecMark", "GradMode", ["SUM","SUM_COND_OUT"], 0>;
def CondExecMarkStaticInfer : MgbEnumAttr<"::megdnn::param::CondExecMark", "StaticInfer", ["SHAPE_VALUE","SHAPE_ONLY","NONE"], 0>;
class CondExecMarkParamBase<string accessor> : MgbPackedParamBase<"CondExecMark", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<CondExecMarkGradMode, "::megdnn::param::CondExecMark::GradMode::SUM">:$grad_mode,
        MgbDefaultValuedAttr<CondExecMarkStaticInfer, "::megdnn::param::CondExecMark::StaticInfer::SHAPE_VALUE">:$static_infer
    );
}

def CondExecMarkParam : CondExecMarkParamBase<"param">;

def CondExecMergeMode : MgbEnumAttr<"::megdnn::param::CondExecMerge", "Mode", ["EXACT_ONE","EXACT_ONE_SAME_SHAPE","SUM","SUM_COND_OUT"], 0>;
class CondExecMergeParamBase<string accessor> : MgbPackedParamBase<"CondExecMerge", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$nr_output,
        MgbDefaultValuedAttr<CondExecMergeMode, "::megdnn::param::CondExecMerge::Mode::EXACT_ONE">:$mode
    );
}

def CondExecMergeParam : CondExecMergeParamBase<"param">;

class NvOfParamBase<string accessor> : MgbPackedParamBase<"NvOf", accessor> {
    let fields = (ins
        MgbDefaultValuedAttr<MgbUI32Attr, "1">:$precision
    );
}

def NvOfParam : NvOfParamBase<"param">;

#endif // MGB_PARAM
